// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Interviewer {
  id          String                         @id @default(uuid())
  name        String
  disciplines Discipline[]
  email       String                         @unique
  createdAt   DateTime                       @default(now())
  updatedAt   DateTime                       @updatedAt
  interviews  InterviewMemberParticipation[]
}

model Intern {
  id                String             @id @default(uuid())
  firstName         String
  lastName          String
  email             String             @unique
  image             String?
  data              Json
  notes             String             @default("")
  interviewStatus   InterviewStatus    @default(NoRight)
  interviewSlot     InterviewSlot?
  internDisciplines InternDiscipline[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  logs              InternLog[]
}

model InternDiscipline {
  internId              String
  intern                Intern                 @relation(fields: [internId], references: [id])
  discipline            Discipline
  priority              Int
  status                DisciplineStatus
  testSlot              TestSlot?              @relation(fields: [testSlotId], references: [id])
  testSlotId            String?
  testStatus            TestStatus?
  testScore             Int?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  internQuestionAnswers InternQuestionAnswer[]

  @@id([internId, discipline])
}

model TestSlot {
  id                String             @id @default(uuid())
  discipline        Discipline
  start             DateTime
  end               DateTime
  location          String
  capacity          Int
  maxPoints         Int
  password          String             @default("dump1234")
  internDisciplines InternDiscipline[]
  testQuestions     TestQuestion[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  testClusterId     String?
}

model TestQuestion {
  id                    String                 @id @default(uuid())
  title                 String
  text                  String
  points                Int
  order                 Int
  testSlot              TestSlot               @relation(fields: [testSlotId], references: [id], onDelete: Cascade)
  testSlotId            String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  internQuestionAnswers InternQuestionAnswer[]
  TestCaseCluster       TestCaseCluster[]
}

model TestCaseCluster {
  id               String             @id @default(uuid())
  name             String //TODO: Maybe not needed
  description      String
  testQuestionId   String
  maxExecutionTime Int                @default(1000)
  maxMemory        Int                @default(256) // Most likely we will differentiatte these by input and now exextion params but just in case
  testQuestion     TestQuestion       @relation(fields: [testQuestionId], references: [id])
  points           Int
  TestCase         TestCase[]
  EvaluatedCluster EvaluatedCluster[]
}

model TestCase {
  id                String          @id @default(uuid())
  testCaseClusterId String
  testCaseCluster   TestCaseCluster @relation(fields: [testCaseClusterId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  input             String[]
  expectedOutput    String[]
  EvaluatedCase     EvaluatedCase[]
}

model InternQuestionAnswer {
  id                         String             @id @default(uuid())
  language                   CodingLanguage
  code                       String
  score                      Int?
  question                   TestQuestion       @relation(fields: [questionId], references: [id])
  questionId                 String
  internDiscipline           InternDiscipline   @relation(fields: [internDisciplineInternId, internDisciplineDiscipline], references: [internId, discipline])
  internDisciplineInternId   String
  internDisciplineDiscipline Discipline
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
  EvaluatedCluster           EvaluatedCluster[]
  EvaluatedCase              EvaluatedCase[]
}

model EvaluatedCluster {
  internQuestionAnswerId String
  internQuestionAnswer   InternQuestionAnswer @relation(fields: [internQuestionAnswerId], references: [id])
  testClusterId          String
  testCluster            TestCaseCluster      @relation(fields: [testClusterId], references: [id])
  EvaluatedCase          EvaluatedCase[]

  @@id([internQuestionAnswerId, testClusterId])
}

model EvaluatedCase {
  testCaseId                             String
  testCase                               TestCase              @relation(fields: [testCaseId], references: [id])
  evaluationStatus                       EvaluationResult
  userOutput                             String?
  executionTime                          Int?
  memoryUsed                             Int?
  error                                  String?
  EvaluatedCluster                       EvaluatedCluster      @relation(fields: [evaluatedClusterInternQuestionAnswerId, evaluatedClusterTestClusterId], references: [internQuestionAnswerId, testClusterId])
  evaluatedClusterInternQuestionAnswerId String
  evaluatedClusterTestClusterId          String
  InternQuestionAnswer                   InternQuestionAnswer? @relation(fields: [internQuestionAnswerId], references: [id])
  internQuestionAnswerId                 String?

  @@id([testCaseId, evaluatedClusterInternQuestionAnswerId, evaluatedClusterTestClusterId])
}

model InterviewSlot {
  id           String                         @id @default(uuid())
  intern       Intern?                        @relation(fields: [internId], references: [id])
  internId     String?                        @unique
  start        DateTime
  end          DateTime
  answers      Json
  score        Int?
  createdAt    DateTime                       @default(now())
  updatedAt    DateTime                       @updatedAt
  interviewers InterviewMemberParticipation[]
}

model InterviewMemberParticipation {
  interviewSlotId String
  interviewSlot   InterviewSlot @relation(fields: [interviewSlotId], references: [id], onDelete: Cascade)
  interviewerId   String
  interviewer     Interviewer   @relation(fields: [interviewerId], references: [id], onDelete: Cascade)

  @@id([interviewSlotId, interviewerId])
}

model InternLog {
  id       String          @id @default(uuid())
  intern   Intern          @relation(fields: [internId], references: [id])
  internId String
  action   InternLogAction
  date     DateTime        @default(now())
}

model AdminLog {
  id          String         @id @default(uuid())
  action      AdminLogAction
  description String
  date        DateTime       @default(now())
}

enum Discipline {
  Development
  Design
  Multimedia
  Marketing
}

enum DisciplineStatus {
  Pending
  Approved
  Rejected
}

enum InterviewStatus {
  NoRight
  PickTerm
  Pending
  Done
  Missed
}

enum TestStatus {
  PickTerm
  Pending
  Done
  Missed
}

enum EvaluationResult {
  AcceptedAnswer
  WrongAnswer
  TimeLimitExceeded
  MemoryLimitExceeded
  RuntimeError
  CompilationError
}

enum CodingLanguage {
  JavaScript
  Python
  CSharp
  CPP
  C
  Java
  Go
}

enum InternLogAction {
  OpenStatusPage
  OpenInterviewPage
  OpenTestPage
}

enum AdminLogAction {
  Create
  Update
  Delete
  Email
}
